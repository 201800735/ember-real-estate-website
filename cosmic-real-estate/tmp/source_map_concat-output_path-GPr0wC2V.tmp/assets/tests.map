{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","cosmic-real-estate/tests/app.lint-test.js","cosmic-real-estate/tests/helpers/destroy-app.js","cosmic-real-estate/tests/helpers/module-for-acceptance.js","cosmic-real-estate/tests/helpers/resolver.js","cosmic-real-estate/tests/helpers/start-app.js","cosmic-real-estate/tests/integration/components/real-estate-listing-test.js","cosmic-real-estate/tests/integration/helpers/format-price-test.js","cosmic-real-estate/tests/test-helper.js","cosmic-real-estate/tests/tests.lint-test.js","cosmic-real-estate/tests/unit/models/listing-test.js","cosmic-real-estate/tests/unit/routes/index-test.js","cosmic-real-estate/tests/unit/routes/listings-test.js","cosmic-real-estate/tests/unit/routes/listings/index-test.js","cosmic-real-estate/tests/unit/routes/listings/listing-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('cosmic-real-estate/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/listing.js should pass ESLint\\n\\n5:28 - \\'snapshot\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/real-estate-listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/real-estate-listing.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/format-price.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/format-price.js should pass ESLint\\n\\n3:40 - \\'rest\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/listing.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/listings.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/listings.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/listings/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/listings/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/listings/listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/listings/listing.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/listing.js should pass ESLint\\n\\n');\n  });\n});","define('cosmic-real-estate/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    _ember.default.run(application, 'destroy');\n  }\n});","define('cosmic-real-estate/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'cosmic-real-estate/tests/helpers/start-app', 'cosmic-real-estate/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = _ember.default.RSVP.Promise;\n});","define('cosmic-real-estate/tests/helpers/resolver', ['exports', 'cosmic-real-estate/resolver', 'cosmic-real-estate/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('cosmic-real-estate/tests/helpers/start-app', ['exports', 'ember', 'cosmic-real-estate/app', 'cosmic-real-estate/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = _ember.default.merge({}, _environment.default.APP);\n    attributes = _ember.default.merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember.default.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('cosmic-real-estate/tests/integration/components/real-estate-listing-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('real-estate-listing', 'Integration | Component | real estate listing', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"/Qe9aeXr\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"real-estate-listing\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"t8G7ESjJ\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"real-estate-listing\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('cosmic-real-estate/tests/integration/helpers/format-price-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('format-price', 'helper:format-price', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wC8ObhO3\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"format-price\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('cosmic-real-estate/tests/test-helper', ['cosmic-real-estate/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('cosmic-real-estate/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/real-estate-listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/real-estate-listing-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/format-price-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/format-price-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/listing-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/listings-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/listings-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/listings/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/listings/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/listings/listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/listings/listing-test.js should pass ESLint\\n\\n');\n  });\n});","define('cosmic-real-estate/tests/unit/models/listing-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('listing', 'Unit | Model | listing', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('cosmic-real-estate/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cosmic-real-estate/tests/unit/routes/listings-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:listings', 'Unit | Route | listings', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cosmic-real-estate/tests/unit/routes/listings/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:listings/index', 'Unit | Route | listings/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('cosmic-real-estate/tests/unit/routes/listings/listing-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:listings/listing', 'Unit | Route | listings/listing', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('cosmic-real-estate/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}